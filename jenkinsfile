pipeline {
    agent any
    environment {
        IMAGE_NAME = "boluex/twitter_clone"
    }
    stages {
        // stage('Checkout') {
        //     steps {
        //         checkout scm
        //     }
        // }
        stage('Check Commit Message') {
            steps {
                script {
                    COMMIT_MSG = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()
                    if (!COMMIT_MSG.contains('[build-image]')) {
                        currentBuild.result = 'SUCCESS'
                        echo "Skipping Docker build: commit message does not contain [build-image]"
                        return
                    }
                    env.IMAGE_TAG = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    if (env.IMAGE_TAG) {
                        withDockerRegistry([credentialsId: 'dockerhub']) {
                            sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                            sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                        }
                    } else {
                        echo "Skipping Docker build: IMAGE_TAG not set"
                    }
                }
            }
        }
        stage('Deploy to K8s') {
            steps {
                script {
                    if (env.IMAGE_TAG) {
                        sh 'sed "s|IMAGE_TAG|${IMAGE_TAG}|g" deployment.yaml.template > deployment.yaml'
                        sh 'kubectl apply -f deployment.yaml'
                    } else {
                        echo "Skipping deploy: IMAGE_TAG not set"
                    }
                }
            }
        }
    }
}
